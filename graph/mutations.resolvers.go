package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"

	"github.com/davehornigan/hassio-attributes/ent"
	"github.com/davehornigan/hassio-attributes/internal/helpers"
)

// CreateAttribute is the resolver for the createAttribute field.
func (r *mutationResolver) CreateAttribute(ctx context.Context, input ent.CreateAttributeInput) (*ent.Attribute, error) {
	return r.Client.Attribute.Create().SetInput(input).Save(ctx)
}

// UpdateAttribute is the resolver for the updateAttribute field.
func (r *mutationResolver) UpdateAttribute(ctx context.Context, id string, input ent.UpdateAttributeInput) (*ent.Attribute, error) {
	uid, err := helpers.UUIDFromString(id)
	if err != nil {
		return nil, err
	}
	update := r.Client.Attribute.UpdateOneID(*uid)

	if input.UserID != nil {
		update.SetUserID(*input.UserID)
	}
	if input.AttributeName != nil {
		update.SetAttributeName(*input.AttributeName)
	}
	if input.JSONValue != nil {
		update.SetJSONValue(input.JSONValue)
	}

	return update.Save(ctx)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	return ent.FromContext(ctx).User.Create().SetInput(input).Save(ctx)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input ent.UpdateUserInput) (*ent.User, error) {
	uid, err := helpers.UUIDFromString(id)
	if err != nil {
		return nil, err
	}
	update := ent.FromContext(ctx).User.UpdateOneID(*uid)

	if input.ExternalID != nil {
		update.SetExternalID(*input.ExternalID)
	}

	return update.Save(ctx)
}

// CreateAttribute is the resolver for the createAttribute field.
func (r *createUserInputResolver) CreateAttribute(ctx context.Context, obj *ent.CreateUserInput, data []*ent.CreateAttributeInput) error {
	c := ent.FromContext(ctx)
	builders := make([]*ent.AttributeCreate, len(data))
	for i := range data {
		builders[i] = c.Attribute.Create().SetInput(*data[i])
	}
	attributes, err := r.Client.Attribute.CreateBulk(builders...).Save(ctx)
	if err != nil {
		return err
	}
	ids := make([]string, len(attributes))
	for i := range attributes {
		ids[i] = attributes[i].ID.String()
	}

	return nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
