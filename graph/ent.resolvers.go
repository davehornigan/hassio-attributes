package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"

	"github.com/davehornigan/hassio-attributes/ent"
	"github.com/davehornigan/hassio-attributes/ent/attribute"
	"github.com/davehornigan/hassio-attributes/ent/user"
	"github.com/davehornigan/hassio-attributes/internal/helpers"
	"github.com/google/uuid"
)

// ID is the resolver for the id field.
func (r *attributeResolver) ID(ctx context.Context, obj *ent.Attribute) (string, error) {
	return helpers.GraphQLStringIDFromUUID(obj.ID, "Attribute"), nil
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	uid, err := helpers.UUIDFromString(id)
	if err != nil {
		return nil, err
	}
	return r.Client.Noder(ctx, *uid)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	uids := make([]uuid.UUID, len(ids))
	for i, s := range ids {
		id, err := helpers.UUIDFromString(s)
		if err != nil {
			return nil, err
		}
		uids[i] = *id
	}
	return r.Client.Noders(ctx, uids)
}

// Attributes is the resolver for the attributes field.
func (r *queryResolver) Attributes(ctx context.Context) ([]*ent.Attribute, error) {
	return r.Client.Attribute.Query().All(ctx)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*ent.User, error) {
	return r.Client.User.Query().All(ctx)
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *ent.User) (string, error) {
	return helpers.GraphQLStringIDFromUUID(obj.ID, "User"), nil
}

// ID is the resolver for the id field.
func (r *attributeWhereInputResolver) ID(ctx context.Context, obj *ent.AttributeWhereInput, data *string) error {
	uid, err := helpers.UUIDFromString(*data)
	if err != nil {
		return err
	}
	obj.Predicates = append(obj.Predicates, attribute.ID(*uid))

	return nil
}

// IDNeq is the resolver for the idNEQ field.
func (r *attributeWhereInputResolver) IDNeq(ctx context.Context, obj *ent.AttributeWhereInput, data *string) error {
	uid, err := helpers.UUIDFromString(*data)
	if err != nil {
		return err
	}
	obj.Predicates = append(obj.Predicates, attribute.IDNEQ(*uid))

	return nil
}

// IDIn is the resolver for the idIn field.
func (r *attributeWhereInputResolver) IDIn(ctx context.Context, obj *ent.AttributeWhereInput, data []string) error {
	uids := make([]uuid.UUID, len(data))
	for i, s := range data {
		id, err := helpers.UUIDFromString(s)
		if err != nil {
			return err
		}
		uids[i] = *id
	}
	obj.Predicates = append(obj.Predicates, attribute.IDIn(uids...))

	return nil
}

// IDNotIn is the resolver for the idNotIn field.
func (r *attributeWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.AttributeWhereInput, data []string) error {
	uids := make([]uuid.UUID, len(data))
	for i, s := range data {
		id, err := helpers.UUIDFromString(s)
		if err != nil {
			return err
		}
		uids[i] = *id
	}
	obj.Predicates = append(obj.Predicates, attribute.IDNotIn(uids...))

	return nil
}

// IDGt is the resolver for the idGT field.
func (r *attributeWhereInputResolver) IDGt(ctx context.Context, obj *ent.AttributeWhereInput, data *string) error {
	uid, err := helpers.UUIDFromString(*data)
	if err != nil {
		return err
	}
	obj.Predicates = append(obj.Predicates, attribute.IDGT(*uid))

	return nil
}

// IDGte is the resolver for the idGTE field.
func (r *attributeWhereInputResolver) IDGte(ctx context.Context, obj *ent.AttributeWhereInput, data *string) error {
	uid, err := helpers.UUIDFromString(*data)
	if err != nil {
		return err
	}
	obj.Predicates = append(obj.Predicates, attribute.IDGTE(*uid))

	return nil
}

// IDLt is the resolver for the idLT field.
func (r *attributeWhereInputResolver) IDLt(ctx context.Context, obj *ent.AttributeWhereInput, data *string) error {
	uid, err := helpers.UUIDFromString(*data)
	if err != nil {
		return err
	}
	obj.Predicates = append(obj.Predicates, attribute.IDLT(*uid))

	return nil
}

// IDLte is the resolver for the idLTE field.
func (r *attributeWhereInputResolver) IDLte(ctx context.Context, obj *ent.AttributeWhereInput, data *string) error {
	uid, err := helpers.UUIDFromString(*data)
	if err != nil {
		return err
	}
	obj.Predicates = append(obj.Predicates, attribute.IDLTE(*uid))

	return nil
}

// ID is the resolver for the id field.
func (r *userWhereInputResolver) ID(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	uid, err := helpers.UUIDFromString(*data)
	if err != nil {
		return err
	}
	obj.Predicates = append(obj.Predicates, user.ID(*uid))

	return nil
}

// IDNeq is the resolver for the idNEQ field.
func (r *userWhereInputResolver) IDNeq(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	uid, err := helpers.UUIDFromString(*data)
	if err != nil {
		return err
	}
	obj.Predicates = append(obj.Predicates, user.IDNEQ(*uid))

	return nil
}

// IDIn is the resolver for the idIn field.
func (r *userWhereInputResolver) IDIn(ctx context.Context, obj *ent.UserWhereInput, data []string) error {
	uids := make([]uuid.UUID, len(data))
	for i, s := range data {
		id, err := helpers.UUIDFromString(s)
		if err != nil {
			return err
		}
		uids[i] = *id
	}
	obj.Predicates = append(obj.Predicates, user.IDIn(uids...))

	return nil
}

// IDNotIn is the resolver for the idNotIn field.
func (r *userWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.UserWhereInput, data []string) error {
	uids := make([]uuid.UUID, len(data))
	for i, s := range data {
		id, err := helpers.UUIDFromString(s)
		if err != nil {
			return err
		}
		uids[i] = *id
	}
	obj.Predicates = append(obj.Predicates, user.IDNotIn(uids...))

	return nil
}

// IDGt is the resolver for the idGT field.
func (r *userWhereInputResolver) IDGt(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	uid, err := helpers.UUIDFromString(*data)
	if err != nil {
		return err
	}
	obj.Predicates = append(obj.Predicates, user.IDGT(*uid))

	return nil
}

// IDGte is the resolver for the idGTE field.
func (r *userWhereInputResolver) IDGte(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	uid, err := helpers.UUIDFromString(*data)
	if err != nil {
		return err
	}
	obj.Predicates = append(obj.Predicates, user.IDGTE(*uid))

	return nil
}

// IDLt is the resolver for the idLT field.
func (r *userWhereInputResolver) IDLt(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	uid, err := helpers.UUIDFromString(*data)
	if err != nil {
		return err
	}
	obj.Predicates = append(obj.Predicates, user.IDLT(*uid))

	return nil
}

// IDLte is the resolver for the idLTE field.
func (r *userWhereInputResolver) IDLte(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	uid, err := helpers.UUIDFromString(*data)
	if err != nil {
		return err
	}
	obj.Predicates = append(obj.Predicates, user.IDLTE(*uid))

	return nil
}

// Attribute returns AttributeResolver implementation.
func (r *Resolver) Attribute() AttributeResolver { return &attributeResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// AttributeWhereInput returns AttributeWhereInputResolver implementation.
func (r *Resolver) AttributeWhereInput() AttributeWhereInputResolver {
	return &attributeWhereInputResolver{r}
}

// CreateUserInput returns CreateUserInputResolver implementation.
func (r *Resolver) CreateUserInput() CreateUserInputResolver { return &createUserInputResolver{r} }

// UserWhereInput returns UserWhereInputResolver implementation.
func (r *Resolver) UserWhereInput() UserWhereInputResolver { return &userWhereInputResolver{r} }

type attributeResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type attributeWhereInputResolver struct{ *Resolver }
type createUserInputResolver struct{ *Resolver }
type userWhereInputResolver struct{ *Resolver }
