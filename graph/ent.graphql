directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Attribute implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  userID: String!
  attributeName: String!
  jsonValue: Map!
}
"""
Ordering options for Attribute connections
"""
input AttributeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Attributes.
  """
  field: AttributeOrderField!
}
"""
Properties by which Attribute connections can be ordered.
"""
enum AttributeOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  USER_ID
  ATTRIBUTE_NAME
}
"""
AttributeWhereInput is used for filtering Attribute objects.
Input was generated by ent.
"""
input AttributeWhereInput {
  not: AttributeWhereInput
  and: [AttributeWhereInput!]
  or: [AttributeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  user_id field predicates
  """
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDEqualFold: String
  userIDContainsFold: String
  """
  attribute_name field predicates
  """
  attributeName: String
  attributeNameNEQ: String
  attributeNameIn: [String!]
  attributeNameNotIn: [String!]
  attributeNameGT: String
  attributeNameGTE: String
  attributeNameLT: String
  attributeNameLTE: String
  attributeNameContains: String
  attributeNameHasPrefix: String
  attributeNameHasSuffix: String
  attributeNameEqualFold: String
  attributeNameContainsFold: String
}
"""
CreateAttributeInput is used for create Attribute object.
Input was generated by ent.
"""
input CreateAttributeInput {
  userID: String!
  attributeName: String!
  jsonValue: Map!
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  externalID: String!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
The builtin Map type
"""
scalar Map
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/davehornigan/hassio-attributes/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  attributes: [Attribute!]!
  users: [User!]!
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateAttributeInput is used for update Attribute object.
Input was generated by ent.
"""
input UpdateAttributeInput {
  userID: String
  attributeName: String
  jsonValue: Map
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  externalID: String
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  externalID: String!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  ExternalID
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  external_id field predicates
  """
  externalID: String
  externalIDNEQ: String
  externalIDIn: [String!]
  externalIDNotIn: [String!]
  externalIDGT: String
  externalIDGTE: String
  externalIDLT: String
  externalIDLTE: String
  externalIDContains: String
  externalIDHasPrefix: String
  externalIDHasSuffix: String
  externalIDEqualFold: String
  externalIDContainsFold: String
}
